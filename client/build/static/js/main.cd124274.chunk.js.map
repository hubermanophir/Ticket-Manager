{"version":3,"sources":["components/AlertDialog.js","components/Ticket.js","components/AddNew.js","components/SimpleAlerts.js","components/DisableElevation.js","components/CircularIndeterminate.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["AlertDialog","ticket","formatDate","React","useState","open","setOpen","handleClose","className","Button","variant","color","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","content","userEmail","Date","creationTime","labels","map","label","i","DialogActions","autoFocus","myDate","setHours","getHours","date","getDate","slice","month","getMonth","year","getFullYear","hours","minutes","getMinutes","seconds","getSeconds","Ticket","setHiddenCounter","hiddenCounter","setTicketsArray","ticketsArray","setLiveTicketsLength","liveTicketsLength","isDone","setIsDone","ticketContent","setTicketContent","useEffect","done","checkContentLength","length","newTicket","hidden","_id","e","target","parentNode","ticketIndex","Array","from","document","querySelectorAll","indexOf","tempTicketsArr","splice","hideClickHandle","parentElement","childNodes","innerText","a","axios","delete","console","log","message","ticketArr","deleteHandler","checked","onChange","patch","isDoneHandler","type","AddNew","setBadAlert","setGoodAlert","isOpen","setIsOpen","userTicket","closeDialog","fullWidth","TextField","margin","helperText","value","required","rows","multiline","split","post","res","setTimeout","data","newArray","sort","b","dateA","useStyles","makeStyles","theme","root","width","marginTop","spacing","SimpleAlerts","goodAlert","badAlert","classes","Alert","severity","DisableElevation","dateAscending","setsDateAscending","titleAscending","setsTitleAscending","ButtonGroup","disableElevation","temp","sortByDateHandler","localeCompare","sortByTitleHandler","display","marginLeft","CircularIndeterminate","CircularProgress","size","BASE_URL","Main","props","tempArray","setTempArray","displaySpinner","setDisplaySpinner","get","onInputChange","input","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cd124274.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nexport default function AlertDialog({ ticket, formatDate }) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"show-more-button\">\r\n      <Button\r\n        className=\"show-more\"\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleClickOpen}\r\n      >\r\n        Show More\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{ticket.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {ticket.content}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {ticket.userEmail}, {formatDate(new Date(ticket.creationTime))}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {ticket.labels\r\n              ? ticket.labels.map((label, i) => {\r\n                  return (\r\n                    <span key={`label key: ${i}`} className=\"dialog-label\">\r\n                      {`${label} `}\r\n                    </span>\r\n                  );\r\n                })\r\n              : null}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport AlertDialog from \"./AlertDialog\";\r\n\r\nfunction Ticket({\r\n  ticket,\r\n  setHiddenCounter,\r\n  hiddenCounter,\r\n  setTicketsArray,\r\n  ticketsArray,\r\n  setLiveTicketsLength,\r\n  liveTicketsLength,\r\n}) {\r\n  const [isDone, setIsDone] = useState(false);\r\n  const [ticketContent, setTicketContent] = useState(ticket.content);\r\n\r\n  useEffect(() => {\r\n    setIsDone(ticket.done);\r\n    checkContentLength();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsDone(ticket.done);\r\n    checkContentLength();\r\n  }, [ticketsArray]);\r\n\r\n  const hideClickHandle = (e) => {\r\n    const target = e.parentNode;\r\n    const ticketArr = Array.from(document.querySelectorAll(\".ticket\"));\r\n    const ticketIndex = ticketArr.indexOf(target);\r\n    const tempTicketsArr = [...ticketsArray];\r\n    tempTicketsArr.splice(ticketIndex, 1);\r\n    setTicketsArray(tempTicketsArr);\r\n    setHiddenCounter(hiddenCounter + 1);\r\n    setLiveTicketsLength(liveTicketsLength - 1);\r\n  };\r\n\r\n  const isDoneHandler = (e) => {\r\n    setIsDone(!isDone);\r\n    ticket.done = !isDone;\r\n    (async () => {\r\n      const ticket = e.parentElement;\r\n      const id = ticket.childNodes[0].innerText;\r\n      const done = isDone ? \"undone\" : \"done\";\r\n      await axios.patch(`/api/tickets/${id}/${done}`);\r\n    })();\r\n  };\r\n\r\n  const deleteHandler = (e) => {\r\n    const ticketDiv = e.parentElement;\r\n    const id = ticketDiv.childNodes[0].innerText;\r\n    (async () => {\r\n      try {\r\n        await axios.delete(`/api/tickets/${id}`);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n      const target = e.parentNode;\r\n      const ticketArr = Array.from(document.querySelectorAll(\".ticket\"));\r\n      const ticketIndex = ticketArr.indexOf(target);\r\n      const tempTicketsArr = [...ticketsArray];\r\n      tempTicketsArr.splice(ticketIndex, 1);\r\n      setTicketsArray(tempTicketsArr);\r\n    })();\r\n    setLiveTicketsLength(liveTicketsLength - 1);\r\n  };\r\n\r\n  const checkContentLength = () => {\r\n    if (ticket.content.length >= 200) {\r\n      const newTicket = ticket.content.slice(0, 199) + \"...\";\r\n      setTicketContent(newTicket);\r\n    } else {\r\n      setTicketContent(ticket.content);\r\n    }\r\n  };\r\n  return (\r\n    <div className={`ticket ${isDone ? \"done\" : \"undone\"}`}>\r\n      <span className=\"id\" hidden={true}>{`${ticket._id}`}</span>\r\n      <div className=\"title\">{ticket.title}</div>\r\n      <div className=\"content\">{ticketContent}</div>\r\n      <div className=\"ticket-info\">\r\n        <span className=\"user-email\">{ticket.userEmail}</span>\r\n        <span className=\"done-status\">{ticket.done}</span>\r\n        <span className=\"ticket-time\">\r\n          {formatDate(new Date(ticket.creationTime))}\r\n        </span>\r\n      </div>\r\n      <div className=\"label-div\">\r\n        {ticket.labels\r\n          ? ticket.labels.map((label, i) => {\r\n              return (\r\n                <span key={`label key: ${i}`} className=\"label\">\r\n                  {label}\r\n                </span>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n      <button\r\n        onClick={(e) => hideClickHandle(e.target)}\r\n        className=\"hideTicketButton\"\r\n      >\r\n        Hide\r\n      </button>\r\n      <button onClick={(e) => deleteHandler(e.target)} className=\"delete\">\r\n        Delete\r\n      </button>\r\n      <input\r\n        checked={isDone}\r\n        className=\"checkbox\"\r\n        onChange={(e) => isDoneHandler(e.target)}\r\n        type=\"checkbox\"\r\n      ></input>\r\n      <AlertDialog formatDate={formatDate} ticket={ticket} />\r\n    </div>\r\n  );\r\n}\r\n\r\n//Helper functions---------------------------------------------------------\r\nconst formatDate = (myDate) => {\r\n  myDate.setHours(myDate.getHours() - 2);\r\n  const date = (\"0\" + myDate.getDate()).slice(-2);\r\n  const month = (\"0\" + (myDate.getMonth() + 1)).slice(-2);\r\n  const year = myDate.getFullYear();\r\n  const hours = (\"0\" + myDate.getHours()).slice(-2);\r\n  const minutes = (\"0\" + myDate.getMinutes()).slice(-2);\r\n  const seconds = (\"0\" + myDate.getSeconds()).slice(-2);\r\n  return `${date}/${month}/${year}, ${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nexport default Ticket;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nfunction AddNew({\r\n  setTicketsArray,\r\n  setLiveTicketsLength,\r\n  liveTicketsLength,\r\n  setBadAlert,\r\n  setGoodAlert,\r\n}) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const userTicket = {\r\n    title: \"\",\r\n    content: \"\",\r\n    userEmail: \"\",\r\n    creationTime: new Date(),\r\n    labels: [],\r\n  };\r\n  const clickHandler = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const closeDialog = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const submit = () => {\r\n    if (!userTicket.title || !userTicket.content) {\r\n      return;\r\n    }\r\n    (async () => {\r\n      try {\r\n        const res = await axios.post(\"/api/tickets\", userTicket);\r\n        setGoodAlert(true);\r\n        setTimeout(() => {\r\n          setGoodAlert(false);\r\n        }, 3000);\r\n        res.data.newArray.sort((a, b) => {\r\n          const dateA = new Date(a.creationTime),\r\n            dateB = new Date(b.creationTime);\r\n          return dateB - dateA;\r\n        });\r\n        setTicketsArray(res.data.newArray);\r\n      } catch (error) {\r\n        setBadAlert(true);\r\n        setTimeout(() => {\r\n          setBadAlert(false);\r\n        }, 3000);\r\n      }\r\n    })();\r\n    setLiveTicketsLength(liveTicketsLength + 1);\r\n    closeDialog();\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-new-div\">\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => clickHandler()}\r\n      >\r\n        Add new\r\n      </Button>\r\n      <Dialog\r\n        open={isOpen}\r\n        onClose={closeDialog}\r\n        aria-labelledby=\"form-dialog-title\"\r\n        fullWidth\r\n        color=\"green\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">New Ticket</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            id=\"title\"\r\n            label=\"title\"\r\n            margin=\"normal\"\r\n            helperText=\"Ticket's title\"\r\n            onChange={(e) => {\r\n              userTicket.title = e.target.value;\r\n            }}\r\n            fullWidth\r\n            required\r\n          />\r\n\r\n          <TextField\r\n            id=\"content\"\r\n            label=\"Content\"\r\n            margin=\"normal\"\r\n            helperText=\"Ticket's content\"\r\n            onChange={(e) => {\r\n              userTicket.content = e.target.value;\r\n            }}\r\n            variant=\"outlined\"\r\n            rows=\"3\"\r\n            multiline\r\n            fullWidth\r\n            required\r\n          />\r\n\r\n          <TextField\r\n            id=\"user-email\"\r\n            label=\"E-mail-address\"\r\n            margin=\"normal\"\r\n            helperText=\"Your e-mail address will be shown on the ticket\"\r\n            onChange={(e) => {\r\n              userTicket.userEmail = e.target.value;\r\n            }}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            id=\"labels\"\r\n            label=\"labels\"\r\n            margin=\"normal\"\r\n            helperText=\"please use space in between each label (optional)\"\r\n            onChange={(e) => {\r\n              userTicket.labels = e.target.value.split(\" \");\r\n            }}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button className=\"form-button\" onClick={closeDialog} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button\r\n            className=\"form-button\"\r\n            onClick={() => submit()}\r\n            color=\"primary\"\r\n          >\r\n            Add Ticket\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNew;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SimpleAlerts({ goodAlert, badAlert }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {goodAlert ? (\r\n        <Alert className=\"alert\" variant=\"filled\" severity=\"success\">\r\n          Ticket added successfully!\r\n        </Alert>\r\n      ) : badAlert ? (\r\n        <Alert className=\"alert\" variant=\"filled\" severity=\"error\">\r\n          Please check your network connection!\r\n        </Alert>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function DisableElevation({ setTicketsArray, ticketsArray }) {\r\n  const [dateAscending, setsDateAscending] = useState(true);\r\n  const [titleAscending, setsTitleAscending] = useState(true);\r\n\r\n  const sortByDateHandler = () => {\r\n    if (dateAscending) {\r\n      ticketsArray.sort((a, b) => {\r\n        const dateA = new Date(a.creationTime),\r\n          dateB = new Date(b.creationTime);\r\n        return dateB - dateA;\r\n      });\r\n    } else {\r\n      ticketsArray.sort((a, b) => {\r\n        const dateA = new Date(a.creationTime),\r\n          dateB = new Date(b.creationTime);\r\n        return dateA - dateB;\r\n      });\r\n    }\r\n    const temp = [...ticketsArray];\r\n    setTicketsArray(temp);\r\n    setsDateAscending(!dateAscending);\r\n  };\r\n  const sortByTitleHandler = () => {\r\n    if (titleAscending) {\r\n      ticketsArray.sort((a, b) => a.title.localeCompare(b.title));\r\n    } else {\r\n      ticketsArray.sort((a, b) => b.title.localeCompare(a.title));\r\n    }\r\n    const temp = [...ticketsArray];\r\n    setTicketsArray(temp);\r\n    setsTitleAscending(!titleAscending);\r\n  };\r\n  return (\r\n    <ButtonGroup id=\"button-container\" disableElevation variant=\"contained\" color=\"primary\">\r\n      <Button onClick={() => sortByDateHandler()}>{dateAscending ? \"Sort By Date ⬆\" :\"Sort By Date ⬇\"}</Button>\r\n      <Button onClick={() => sortByTitleHandler()}>{titleAscending ? \"Sort By Title ⬆\" :\"Sort By Title ⬇\"}</Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CircularIndeterminate() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div id=\"spinner\" className={classes.root}>\r\n      <CircularProgress  size={100}/>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Ticket from \"./Ticket\";\r\nimport AddNew from \"./AddNew\";\r\nimport SimpleAlerts from \"./SimpleAlerts\";\r\nimport DisableElevation from \"./DisableElevation\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularIndeterminate from \"./CircularIndeterminate\";\r\nconst BASE_URL = \"/api/tickets\";\r\n\r\nfunction Main(props) {\r\n  const [ticketsArray, setTicketsArray] = useState([]);\r\n  const [hiddenCounter, setHiddenCounter] = useState(0);\r\n  const [tempArray, setTempArray] = useState([]);\r\n  const [liveTicketsLength, setLiveTicketsLength] = useState(\"0\");\r\n  const [goodAlert, setGoodAlert] = useState(false);\r\n  const [badAlert, setBadAlert] = useState(false);\r\n  const [displaySpinner, setDisplaySpinner] = useState(false);\r\n\r\n  //On page load\r\n  useEffect(() => {\r\n    (async function loadTickets() {\r\n      setDisplaySpinner(true);\r\n      let res;\r\n      try {\r\n        res = await axios.get(BASE_URL);\r\n      } catch (error) {\r\n        setBadAlert(true);\r\n        setTimeout(() => {\r\n          setBadAlert(false);\r\n        }, 3000);\r\n      }\r\n      setDisplaySpinner(false);\r\n      res.data.sort((a, b) => {\r\n        const dateA = new Date(a.creationTime),\r\n          dateB = new Date(b.creationTime);\r\n        return dateB - dateA;\r\n      });\r\n      setTicketsArray(res.data);\r\n      setTempArray(res.data);\r\n      setLiveTicketsLength(res.data.length);\r\n    })();\r\n    setBadAlert(false);\r\n    setHiddenCounter(0);\r\n  }, []);\r\n\r\n  //Handles the user input\r\n  const onInputChange = async (input) => {\r\n    let res;\r\n    try {\r\n      res = await axios.get(`${BASE_URL}?searchText=${input}`);\r\n    } catch (error) {\r\n      setBadAlert(true);\r\n      setTimeout(() => {\r\n        setBadAlert(false);\r\n      }, 3000);\r\n    }\r\n    setLiveTicketsLength(res.data.length);\r\n    setTicketsArray(res.data);\r\n  };\r\n\r\n  const restoreHandler = () => {\r\n    setHiddenCounter(0);\r\n    setTicketsArray(tempArray);\r\n    setLiveTicketsLength(tempArray.length);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-div\">\r\n      {(goodAlert || badAlert) && (\r\n        <SimpleAlerts goodAlert={goodAlert} badAlert={badAlert} />\r\n      )}\r\n      {displaySpinner && <CircularIndeterminate />}\r\n      <h1 id=\"main-title\">Ticket Manager</h1>\r\n      <h2>My Way</h2>\r\n      <div className=\"control-container\">\r\n        <DisableElevation\r\n          ticketsArray={ticketsArray}\r\n          setTicketsArray={setTicketsArray}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          id=\"restoreHideTickets\"\r\n          onClick={() => restoreHandler()}\r\n        >\r\n          restore\r\n        </Button>\r\n        <AddNew\r\n          setTicketsArray={setTicketsArray}\r\n          liveTicketsLength={liveTicketsLength}\r\n          setLiveTicketsLength={setLiveTicketsLength}\r\n          setBadAlert={setBadAlert}\r\n          setGoodAlert={setGoodAlert}\r\n        />\r\n        <input\r\n          onChange={(e) => onInputChange(e.target.value)}\r\n          id=\"searchInput\"\r\n          type=\"text\"\r\n          placeholder=\"Search Task\"\r\n        />\r\n        <div className=\"ticket-number-div\">-{liveTicketsLength} results-</div>\r\n        <div id=\"counter-div\">\r\n          <span id=\"hideTicketsCounter\">{hiddenCounter}</span> Hidden tickets\r\n        </div>\r\n      </div>\r\n      <div className=\"ticket-area\">\r\n        {ticketsArray.map((ticket, i) => {\r\n          return (\r\n            <Ticket\r\n              key={`ticket key: ${i}`}\r\n              ticket={ticket}\r\n              setHiddenCounter={setHiddenCounter}\r\n              hiddenCounter={hiddenCounter}\r\n              setTicketsArray={setTicketsArray}\r\n              ticketsArray={ticketsArray}\r\n              setLiveTicketsLength={setLiveTicketsLength}\r\n              liveTicketsLength={liveTicketsLength}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import Main from './components/Main'\r\nimport styling from './App.css'\r\n\r\nfunction App() {\r\n  return <div className=\"App\">\r\n    <Main/>\r\n  </div>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}